function [y1] = multivariateNeuralNetTrained(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 29-Aug-2019 10:58:42.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx3 matrix, input #1
% and returns:
%   y = Qx2 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [2;9;-35];
x1_step1.gain = [0.0392156862745098;0.125;0.0909090909090909];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.8387014178740459514;4.8280753802135336628;4.1667336696378871608;4.6827365850509492518;-2.6103960654177864598;3.9812505926895886965;0.44705002181654662774;-0.84383999782135399315;0.63561671222368876233;-1.3323802974332088489;-1.6485508057522368919;2.1614870551358316142;-0.044883578316896544091;-1.0400503705373538299;-2.8585110663152408783;-1.3451235528800506991;-1.7568615800387508141;-1.6384373642650373881;3.6545020365367095749;-3.2234350454356186511];
IW1_1 = [-5.4162009563714548221 -2.3204164417916670615 1.8001560410787504907;-2.4342075440890975635 -3.2176463946828892659 0.045905032856823867193;-4.9159334042633782147 1.9622620238167538531 -1.9668127393887488985;-6.1252666632461449936 1.8658895403104154287 -2.4465347365370360144;1.8609495703411862433 -2.6102097683819009966 2.4047633581270213554;-6.140500548368419409 1.3747514922570922558 2.5202675509386054387;2.5543341909553771707 1.9541554816582600296 5.4889367791080463377;2.0343693353235305921 4.2998022104183437619 -0.87928429668165342115;-4.2401706709722937205 -2.4491515089276645334 -6.2728843985352575885;-1.9527439588387527358 1.4367396434430101948 1.3888787573836598455;2.0073015594526282257 -3.3171539500063320638 0.35577751329716039708;-5.0180375003459642969 -1.411912424066024796 0.33771305279775476471;-0.17894619737680234062 1.078365193042061243 -2.8566511066138273733;-3.527211183073477585 -2.8949719058912601888 1.4289135211644286017;-3.838413076255672518 0.089586145949527407062 0.79893396097328539529;-1.9912314733978397907 3.8669593608006014307 4.6601574377579817465;0.43623322100321371142 2.2656548388229977853 1.5604631058023854528;4.0773359682096605994 1.0132274326325791947 0.40126287398137072682;0.52607072175260793934 3.2160462164699841203 2.8779159126685005532;-4.2076786450309802134 -0.89809467585581959082 0.83467782892021225027];

% Layer 2
b2 = [1.8470488054703062542;-1.4695596829306916131];
LW2_1 = [0.44570422500570333613 0.39866496141185808755 -2.1027985632806096561 1.5290805526713995288 -0.82596329308032045979 -0.1249895772911626679 0.033155883303496294645 0.44621878152822541663 -0.0044679941044395467264 0.74623858888209360085 0.87721044739665798851 2.1090337610403544488 -0.10906488523430718507 -1.1999668472862468072 1.1523556592232597762 -0.12085345928730366338 0.58458757544945372242 2.3448535231234384213 -0.64752564728931916171 0.69401077053916815363;0.62736367324369302079 1.7362798972734374559 -0.77827615624782731096 0.41862162307120387439 -0.27234354620924544621 -0.28862103529689625558 -1.3502243142781691354 0.41757029150281471663 -1.049608889825820901 0.45771603540572730617 0.49292330717801574602 1.0272551583984790291 0.61643610369136836447 0.7333461665464386936 -0.036396008770028374923 -0.52193803597565957553 1.571405523550011063 1.33849250021976518 1.2273862312088992255 -0.45575311955423686294];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.001953125;0.001953125];
y1_step1.xoffset = [0;0];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
